#!/usr/bin/perl -w

# Generate usys.S, the stubs for syscalls.
# usys.pl is a code generator script in xv6.
# Its job: generate the assembly stubs for user-level system call wrappers.
# These stubs let user programs call fork() in C, which actually invokes the right syscall trap into the kernel.

print "# generated by usys.pl - do not edit\n";

print "#include \"kernel/syscall.h\"\n";

# So when you call fork() in user space:
# 1. The C program jumps to this stub.
# 2. Stub puts syscall number into register a7.
# 3. Executes ecall, which traps into the kernel.
# So when ecall happens:
# - CPU traps into kernel.
# - Kernel trap handler calls syscall().
# - syscall() looks up correct function and executes it.

# An assembly stub is a tiny piece of assembly code that acts as a bridge between:
# C code in user space (e.g., when you call fork() in your program), and
# the kernel system call mechanism (on RISC-V, the ecall instruction).
# Itâ€™s basically a wrapper function that hides the low-level details of how a system call is invoked.

sub entry {
    my $name = shift;
    print ".global $name\n";
    print "${name}:\n";
    print " li a7, SYS_${name}\n";
    print " ecall\n";
    print " ret\n";
}

# Add stub for the syscall: trace and sysinfo
# Run make qemu will regenerate user/usys.S automatically.
entry("trace");
entry("sysinfo");

entry("fork");
entry("exit");
entry("wait");
entry("pipe");
entry("read");
entry("write");
entry("close");
entry("kill");
entry("exec");
entry("open");
entry("mknod");
entry("unlink");
entry("fstat");
entry("link");
entry("mkdir");
entry("chdir");
entry("dup");
entry("getpid");
entry("sbrk");
entry("sleep");
entry("uptime");


# Example (from xv6-riscv usys.S)
# usys.pl generates code like this:
# .global fork
# fork:
#     li a7, SYS_fork   # load syscall number for fork into a7
#     ecall             # trap into kernel
#     ret               # return to caller with result in a0

# Now in C, you can declare:
# int fork(void);
# and when you call fork(), it actually jumps into this assembly stub, which performs the system call.